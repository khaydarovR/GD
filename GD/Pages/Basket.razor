@page "/Basket"
@using System.Net.Http.Headers
@using GD.Shared.Common
<h3>Basket</h3>

@if (isClient)
{
    @foreach (var response in _responses)
    {
        if(response.Status != "Delivered")
        {
            <h3>Status: @response!.Status</h3>
            
            <MudPaper Class="pa-4">
                <MudForm>
                    <MudTextField T="string"
                                  InputType="InputType.Text"
                                  Label="Name"
                                  Required="true"
                                  RequiredError="payMethod is required!"
                                  @bind-Text=@payMethod/>
                    <div class="d-flex align-center justify-space-between">
                        <MudButton Variant="Variant.Filled" OnClick="() => CompleteOrder(response.Id)" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
            
            @foreach (var product in response!.Products)
            {

                <MudCard>
                    <MudCardContent>
                        <img width="400" src="data:image/png;base64, @product.ImageValue" alt="Red dot" />             
                        <MudText>@product.Name</MudText>
                        <MudText Typo="Typo.body2">@product.Description</MudText>
                        <MudText Typo="Typo.body2">@product.Tags</MudText>
                        <MudText Typo="Typo.body2">@product.Price$</MudText>
                    </MudCardContent>
                </MudCard>
            }
        }
    }
}
else
{
    <h2>Your are not customer</h2>
}

@code {
    bool isClient = false;
    List<Response> _responses = new();
    string payMethod = "online";

    protected override async Task OnInitializedAsync()
    {
        var authState = await _auth.GetAuthenticationStateAsync();
        var user = authState.User;
        isClient = user.IsInRole(GDUserRoles.Client);
        _auth.AuthenticationStateChanged += _ => StateHasChanged();

        if (isClient)
        {
            var orderId = Guid.Empty;
            if(await _ls.ContainKeyAsync("order")) 
                orderId = Guid.Parse((await _ls.GetItemAsStringAsync("order"))!);
            
            var client = _httpClientFactory.CreateClient("api");
            var request = new HttpRequestMessage(HttpMethod.Get, $"/api/Client/basket");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await _ls.GetItemAsStringAsync("JWT"));
            var response = await client.SendAsync(request);
            _responses = await response.Content.ReadFromJsonAsync<List<Response>>() ?? new();

            if (_responses.FirstOrDefault(r => r.Id == orderId)?.Status == "Delivered") await _ls.RemoveItemAsync("order");
        }
        
        StateHasChanged();
    }
    
    class ProductResponse
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string Tags { get; set; }
        public string ImageValue { get; set; }
        public double Amount { get; set; }
        public double Price { get; set; }
    }

    class Response
    {
        public Guid Id { get; set; }
        public string Status { get; set; } = "";
        public List<ProductResponse> Products { get; set; } = [];
    }

    private async Task CompleteOrder(Guid orderId)
    {
        var client = _httpClientFactory.CreateClient("api");
        var request = new HttpRequestMessage(HttpMethod.Post, $"/api/Order/completewithdefault");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await _ls.GetItemAsStringAsync("JWT"));
        request.Content = JsonContent.Create(new
        {
            orderId,
            payMethod
        });
        var response = await client.SendAsync(request);
    }
}