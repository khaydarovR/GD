@page "/adminka"
@using System.Net.Http.Headers
@using GD.Shared.Common
@using GD.Shared.Request
@using GD.Shared.Response

<h1>Adminka</h1>

@if (isAdmin)
{
    <MudGrid>
        <MudItem xs="6">
            <h3>Create Product</h3>
            <MudPaper Class="pa-4">
                <MudForm>
                    <MudTextField T="string"
                                  InputType="InputType.Text"
                                  Label="Name"
                                  Required="true"
                                  RequiredError="Name is required!"
                                  @bind-Text=@_request.Name/>

                    <MudTextField T="string" Label="Description"
                                  InputType="InputType.Text"
                                  Required="true"
                                  RequiredError="Description is required!"
                                  @bind-Text=@_request.Description/>

                    @* <MudTextField T="string" Label="ImageValue" *@
                    @*               InputType="InputType.Text" *@
                    @*               Required="true" *@
                    @*               RequiredError="Description is required!" *@
                    @*               @bind-Text=@_request.ImageValue/> *@
                    @fileName
                    <MudFileUpload T="IBrowserFile" Accept=".png" FilesChanged="UploadFiles">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload">
                                Upload Files
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>

                    <MudTextField T="double" Label="Price"
                                  InputType="InputType.Number"
                                  Required="true"
                                  RequiredError="Description is required!"
                                  @bind-Value=@_request.Price/>

                    <MudTextField T="string" Label="Tags"
                                  InputType="InputType.Text"
                                  Required="true"
                                  RequiredError="Description is required!"
                                  @bind-Value=@_request.Tags/>

                    <MudTextField T="double" Label="Amount"
                                  InputType="InputType.Number"
                                  Required="true"
                                  RequiredError="Description is required!"
                                  @bind-Value=@_request.Amount/>

                    <div class="d-flex align-center justify-space-between">
                        <MudButton Variant="Variant.Filled" OnClick="AddProduct" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <h3>Create Courier</h3>
            <MudPaper Class="pa-4">
                @foreach (var client in _clients)
                {
                    <MudCard>
                        <MudText>Айди: @client.Id</MudText>
                        <MudText>Почта: @client.Email</MudText>
                        <MudText>Баланс: @client.Balance</MudText>
                        <div class="d-flex align-center justify-space-between">
                            <MudButton Variant="Variant.Filled" OnClick="() => MakeCourier(client.Id)" Color="Color.Primary" Class="ml-auto">Сделать Курьером</MudButton>
                            <MudButton Variant="Variant.Filled" OnClick="() => GetLocation(client.PosLati, client.PosLong)" Color="Color.Primary" Class="ml-auto">Локация</MudButton>
                        </div>
                    </MudCard>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
}
else
{
    <h1>You are not admin</h1>
}

@code {
    readonly Request _request = new();
    bool isAdmin = false;
    List<User> _clients = [];
    MemoryStream image = new MemoryStream();

    async Task AddProduct()
    {
        using var client = _httpClientFactory.CreateClient("api");
        var request = new HttpRequestMessage(HttpMethod.Post, "api/product");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await _ls.GetItemAsStringAsync("JWT"));
        request.Content = JsonContent.Create(_request);
        var response = await client.SendAsync(request);

        var result = await response.Content.ReadFromJsonAsync<Response>();

        if (imageData != null)
        {
            var imageRequest = new HttpRequestMessage(HttpMethod.Post, $"api/product/image?id={result!.Id}");
            imageRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await _ls.GetItemAsStringAsync("JWT"));
            imageRequest.Content = new ByteArrayContent(imageData);
            imageRequest.Content.Headers.ContentType = new MediaTypeHeaderValue(fileType);
            var response2 = await client.SendAsync(imageRequest);
            if (response2.IsSuccessStatusCode)
            {
                _snakbar.Add("Изображение добавлено");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _auth.GetAuthenticationStateAsync();
        var user = authState.User;
        isAdmin = user.IsInRole(GDUserRoles.Admin);
        _auth.AuthenticationStateChanged += _ => StateHasChanged();

        if (isAdmin)
        {
            _clients = (await _http.GetAsync<List<User>>("api/admin/users")).Data!;
        }

        StateHasChanged();
    }

    class User
    {
        public Guid Id { get; set; }
        public string Email { get; set; }
        public double Balance { get; set; }
        public double PosLati { get; set; }
        public double PosLong { get; set; }
    }

    class Response
    {
        public Guid Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string ImageValue { get; set; }
        public double Price { get; set; }
        public string Tags { get; set; }
        public int Amount { get; set; }

        public List<Feedback> Feedbacks { get;set;}
    }

    class Feedback
    {
        public Guid Id { get; set; }
        public Guid ProductId { get; set; }
        public int Stars { get; set; }
        public Guid ClientId { get; set; }
        public string Text { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    class Request
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string Tags { get; set; }
        public string ImageValue { get; set; }
        public double Amount { get; set; }
        public double Price { get; set; }
    }

    private async Task MakeCourier(Guid clientId)
    {
        using var client = _httpClientFactory.CreateClient("api");
        var request = new HttpRequestMessage(HttpMethod.Post, "/api/Courier/new");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await _ls.GetItemAsStringAsync("JWT"));
        request.Content = JsonContent.Create(new { clientId });
        _clients.RemoveAll(c => c.Id == clientId);
        await client.SendAsync(request);
    }

    string fileName = "";
    string fileType = "";
    byte[] imageData;
    private async Task UploadFiles(IBrowserFile? arg)
    {
        if (arg is null) return;
        using var stream = arg.OpenReadStream(135271630);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        imageData = ms.ToArray();
        fileName = arg.Name;
        fileType = arg.ContentType;
    }

    private async Task GetLocation(double clientPosLati, double clientPosLong)
    {
        var parameters = new DialogParameters<Dialog>
        {
            { x => x.Lat, clientPosLati },
            { x => x.Lon, clientPosLong },
        };
        
        await _dialog.ShowAsync<Dialog>("", parameters, new DialogOptions() {});
    }
}